#!/usr/bin/env python3

import requests
from sys import argv
import json
import subprocess
import os

VT_API_KEY = open("/root/.api/virus-total.api", "r").read()
AB_API_KEY = open("/root/.api/abuse-ip.api", "r").read()

class UrlHandler:
    def __init__(self, extURL):
        self.url = extURL
        self.manifest = ""

    def extractSourceCode(self):
        def getAppID(url):
            if url.find("/"):
                return url.rsplit("/", 1)[1]
            else:
                print("invalid url")
                exit()

        def extractCrx(url):
            appID = getAppID(url)
            dlURL = "https://clients2.google.com/service/update2/crx?response=redirect&prodversion=49.0&x=id%3D" \
                    + appID \
                    + "%26installsource%3Dondemand%26uc"
            req = requests.get(dlURL, allow_redirects=True)
            open("/tmp/extension.crx", "wb").write(req.content)
            subprocess.run(["unzip", "-o", "/tmp/extension.crx", "-d", "/tmp/extension"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)

        extractCrx(self.url)

    def getManifest(self):
        with open("/tmp/extension/manifest.json", "r") as f:
            manifest = json.loads(f.read())
        return manifestO

class Analyzer:
    def __init__(self):
        self.manifest = {}
        self.sourcePath = "/tmp/extension"

    def loadManifest(self, manifest):
        self.manifest = manifest

    def checkPermissions(self):
        riskyPerms = ["bookmarks", "clipboardRead", "clipboardWrite", "contentSettings", "debugger", "desktopCapture", \
                     "downloads", "geolocation", "history", "management", "nativeMessaging", "pageCapture", "privacy",\
                     "proxy", "tabCapture", "tabs", "topSites", "ttsEngine", "webNavigation"]
        print("\n [ PERMISSIONS ]______________\n/")
        try:
            for permission in self.manifest["permissions"]:
                if permission in riskyPerms:
                    permission = "| " + permission + " -- RISKY"
                else:
                    permission = "| " + permission
                print(permission)
        except:
            pass
        print("\_____________________________")
        return

    def checkBackgroundTasks(self):
        print("\n [ BACKGROUND TASKS ]_________\n/")
        try:
            for script in manifest["background"]["scripts"]:
                print("| " + script + "\n")
                print(open("/tmp/extension/"+script, "r").read())
        except:
            print("| no background scripts")
        try:
            for page in manifest["background"]["pages"]:
                print("| " + page + "\n")
                print(open("/tmp/extension/"+page, "r").read())
        except:
            try:
                page = manifest["background"]["page"]
                print(open("/tmp/extension/"+page, "r").read())
            except:
                pass
        print("\_____________________________")
        return

    def checkJS(self):
        # look for URLS in javascript code
        print("\n [ URLS IN CODE ]_____________\n/")
        for subdir, dirs, files, in os.walk("/tmp/extension"):
            for f in files:
                if f.endswith(".js"):
                    lineCount = 0
                    with open(subdir+os.sep+f, "r") as jsCode:
                        for line in jsCode:
                            if "http://" in line or "https://" in line:
                                print("|\n| line", lineCount, "in " + subdir + "/" + f + ":")
                                print("| " + line.strip())
#                                foundUrl = re.search('".*?"', line) # cool regex bro
#                                self.repChecker(foundUrl)
                            lineCount += 1
        print("\_____________________________")
        return

    def repChecker(self, ip):

        whoIsPrint(ip)

        print("||\n|| VirusTotal Report:")
        url = 'https://www.virustotal.com/vtapi/v2/ip-address/report'
        params = {'apikey': VT_API_KEY, 'ip': ip}
        response = requests.get(url, params=params)

        pos = 0
        tot = 0
        if response.status_code == 200:
            try:    # try IP else fall through to URL
                result = response.json()
                for each in result['detected_urls']:
                    tot = tot + 1
                    pos = pos + each['positives']

                if tot != 0:
                    print("||   No of Reportings: " + str(tot))
                    print("||   Average Score:    " + str(pos / tot))
                    print("||   VirusTotal Report Link: " + "https://www.virustotal.com/gui/ip-address/" + str(ip))
                else:
                    print("||   No of Reportings: " + str(tot))
            except:
                try: #EAFP
                    url = 'https://www.virustotal.com/vtapi/v2/url/report'
                    params = {'apikey': VT_API_KEY, 'resource': ip}
                    response = requests.get(url, params=params)
                    result = response.json()
                    print("||\n|| VirusTotal Report:")
                    print("||   URL Malicious Reportings: " + str(result['positives']) + "/" + str(result['total']))
                    print("||   VirusTotal Report Link: " + str(result['permalink']))  # gives URL for report (further info)
                except:
                    print("|| Not found in database")
        else:
            print("|| There's been an error - check your API key, or VirusTotal is possible down")

        TOR_URL = "https://check.torproject.org/cgi-bin/TorBulkExitList.py?ip=1.1.1.1"
        req = requests.get(TOR_URL)
        print("||\n|| TOR Exit Node Report: ")
        if req.status_code == 200:
            tl = req.text.split('\n')
            c = 0
            for i in tl:
                if ip == i:
                    print("||  " + i + " is a TOR Exit Node")
                    c = c+1
            if c == 0:
                print("||  " + ip + " is NOT a TOR Exit Node")
        else:
            print("||   TOR LIST UNREACHABLE")


        print("||\n|| Checking BadIP's... ")
        try:
            BAD_IPS_URL = 'https://www.badips.com/get/info/' + ip
            response = requests.get(BAD_IPS_URL)
            if response.status_code == 200:
                result = response.json()

                sc = result['Score']['ssh']
                print("||  " + str(result['suc']))
                print("||  Score: " + str(sc))
            else:
                print('||  Error reaching BadIPs')
        except:
            print('||  IP not found')

        print("||\n|| ABUSEIPDB Report:")
        try:
            AB_URL = 'https://api.abuseipdb.com/api/v2/check'
            days = '180'

            querystring = {
                'ipAddress': ip,
                'maxAgeInDays': days
            }

            headers = {
                'Accept': 'application/json',
                'Key': AB_API_KEY
            }
            response = requests.request(method='GET', url=AB_URL, headers=headers, params=querystring)
            if response.status_code == 200:
                req = response.json()

                print("||   IP:          " + str(req['data']['ipAddress']))
                print("||   Reports:     " + str(req['data']['totalReports']))
                print("||   Abuse Score: " + str(req['data']['abuseConfidenceScore']) + "%")
                print("||   Last Report: " + str(req['data']['lastReportedAt']))
            else:
                print("||   Error Reaching ABUSE IPDB")
        except:
                print('||   IP Not Found')

def main():
    if len(argv) == 1:
        print("Please specify the chrome extension url")
        print("usage: chrome-ext-checker <url>")
        exit()
    url = argv[1]

    analyzer = Analyzer()

    # fetch source code data
    handler = UrlHandler(url)
    handler.extractSourceCode()
    manifest = handler.getManifest()

    # analyze source code
    analyzer.loadManifest(manifest)
    analyzer.checkPermissions()
    analyzer.checkBackgroundTasks()
    analyzer.checkJS()

main()

